# -*- coding: utf-8 -*-
"""Visual_Turing_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wSMxUBkZ-Q-72Faua57eode8p2b0kNiq

# **Visual Turing Test**
---
De la rosa Rincón Carlos Andrés  
UASLP  
Cómputo Bio-Inspirado
"""

#Crear carpetas para hacer el set de datos y agregar las imágenes en ellas
!mkdir dataset
!mkdir dataset/Disgust
!mkdir dataset/Fear
!mkdir dataset/Happiness
!mkdir dataset/Neutral
!mkdir dataset/Sadness
!mkdir dataset/Surprise

#Mostrar cuantas imágenes hay en cada categoría en el dataset
!ls /content/dataset/Disgust | wc -l
!ls /content/dataset/Fear | wc -l
!ls /content/dataset/Happiness | wc -l
!ls /content/dataset/Neutral | wc -l
!ls /content/dataset/Sadness | wc -l
!ls /content/dataset/Surprise | wc -l

#Aumento de datos con ImageDataGenerator
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np

#Crear el dataset generador
datagen = ImageDataGenerator(
    rescale = 1. / 255,
    rotation_range = 30,
    width_shift_range = 0.25,
    height_shift_range = 0.25,
    shear_range = 15,
    zoom_range = [0.5, 1.5],
    validation_split = 0.2  #20% Testing
)

#Generadores para sets de entrenamiento y pruebas
data_gen_entrenamiento = datagen.flow_from_directory('/content/dataset', target_size=(224,224),
                                                     batch_size=32, shuffle=True, subset='training') 
data_gen_pruebas = datagen.flow_from_directory('/content/dataset', target_size=(224,224),
                                                     batch_size=32, shuffle=True, subset='validation') 

#Imprimir 10 imagenes del generador de entrenamiento
for imagen, etiqueta in data_gen_entrenamiento:
  for i in range(10):
    plt.subplot(2,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(imagen[i])
  break
plt.show()

#Importar el modelo
import tensorflow as tf
import tensorflow_hub as hub

url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
mobilenetv2 = hub.KerasLayer(url, input_shape=(224,224,3))

#Congelar el modelo descargado
mobilenetv2.trainable = False

#Creación del modelo
modelo = tf.keras.Sequential([
    mobilenetv2,
    tf.keras.layers.Dense(6, activation='softmax') # Agregamos la nueva capa con 6 neuronas con activación Softmax
])

#Compilar el modelo
modelo.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

#Entrenar el modelo
EPOCAS = 50

historial = modelo.fit(
    data_gen_entrenamiento, epochs=EPOCAS, batch_size=32,
    validation_data=data_gen_pruebas 
)

#Gráficas de precisión
acc = historial.history['accuracy']
val_acc = historial.history['val_accuracy']

loss = historial.history['loss']
val_loss = historial.history['val_loss']

rango_epocas = range(60)

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(rango_epocas, acc, label="Precisión Entrenamiento")
plt.plot(rango_epocas, val_acc, label="Precisión Pruebas")
plt.legend(loc='lower right')
plt.title("Precisión de entrenamiento y pruebas")

plt.subplot(1,2,2)
plt.plot(rango_epocas, loss, label="Pérdida Entrenamiento")
plt.plot(rango_epocas, val_loss, label="Pérdida Pruebas")
plt.legend(loc='upper right')
plt.title("Pérdida de entrenamiento y pruebas")
plt.show()

import requests
from io import BytesIO
import cv2
from PIL import Image

def categorizar(url):
    respuesta = requests.get(url)
    img = Image.open(BytesIO(respuesta.content))
    img = np.array(img).astype(float)/255

    img = cv2.resize(img, (224,224))
    prediccion = modelo.predict(img.reshape(-1, 224, 224, 3))
    return np.argmax(prediccion[0], axis = -1)

#0 = Disgust,   1 = Fear,   2 = Happiness,  3 = Neutral,  4 = Sadness,  5 = Surprise 

url = ['https://i.ibb.co/gRGgRmX/Bloody-knife-1.jpg',  # Debe ser 1
      'https://i.ibb.co/dfxTrzT/Bored-pose-6.jpg',     # Debe ser 4
      'https://i.ibb.co/179797J/Cardboard-3.jpg',      # Debe ser 3
      'https://i.ibb.co/gjDmkqJ/Cockroach-4.jpg',      # Debe ser 0
      'https://i.ibb.co/WVZY8Dc/Couple-7.jpg',         # Debe ser 2 
      'https://i.ibb.co/BjWHxRJ/Fire-1.jpg']           # Debe ser 5

for i in range(6):
  prediccion = categorizar(url[i])
  print(prediccion)